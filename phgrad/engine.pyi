from typing import *
from numpy import ndarray
import numpy.typing as npt
import typing
import phgrad

class Tensor:
    T: Any
    requires_grad: bool
    grad: Optional[ndarray[Any, dtype[+float64]]]
    data: ndarray[Any, dtype[+float64]]
    def __add__(
        self, other: typing.Union[phgrad.engine.Tensor, float, int]
    ) -> Tensor: ...
    def __getitem__(self, idx) -> Tensor: ...
    def __init__(
        self,
        value: numpy.ndarray[typing.Any, numpy.dtype[+_ScalarType_co]],
        requires_grad=True,
    ): ...
    def __mul__(
        self, other: typing.Union[phgrad.engine.Tensor, float, int]
    ) -> Tensor: ...
    def __neg__(self): ...
    def __radd__(
        self, other: typing.Union[phgrad.engine.Tensor, float, int]
    ) -> Tensor: ...
    def __repr__(self) -> str: ...
    def __rmul__(
        self, other: typing.Union[phgrad.engine.Tensor, float, int]
    ) -> Tensor: ...
    def __rsub__(
        self, other: typing.Union[phgrad.engine.Tensor, float, int]
    ) -> Tensor: ...
    def __setitem__(self, idx, value): ...
    def __str__(self) -> str: ...
    def __sub__(
        self, other: typing.Union[phgrad.engine.Tensor, float, int]
    ) -> Tensor: ...
    def add(self, tensor: Tensor) -> Tensor: ...
    def backward(self, allow_fill=True): ...
    def deepwalk(self): ...
    def div(self, tensor: Tensor) -> Tensor: ...
    def dot(self, tensor: Tensor) -> Tensor: ...
    dtype: Any
    def exp(self) -> Tensor: ...
    def log(self) -> Tensor: ...
    def log_softmax(self, dim=0) -> Tensor: ...
    def logsoftmax(self): ...
    def matmul(self, tensor: Tensor) -> Tensor: ...
    def max(self) -> Tensor: ...
    def mean(self) -> Tensor: ...
    def mul(self, tensor: Tensor) -> Tensor: ...
    def neg(self) -> Tensor: ...
    def relu(self) -> Tensor: ...
    shape: Any
    def softmax(self) -> Tensor: ...
    def sub(self, tensor: Tensor) -> Tensor: ...
    def sum(self) -> Tensor: ...
    def take(self, tensor: Tensor, dim=0) -> Tensor: ...
    def transpose(self, order) -> Tensor: ...
